# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc as trainer__message__pb2


class TrainerServiceStub(object):
    """Trainer服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainModel = channel.stream_stream(
                '/fedraft.TrainerService/TrainModel',
                request_serializer=trainer__message__pb2.TrainRequest.SerializeToString,
                response_deserializer=trainer__message__pb2.TrainResponse.FromString,
                )
        self.PushModel = channel.stream_unary(
                '/fedraft.TrainerService/PushModel',
                request_serializer=trainer__message__pb2.PushModelRequest.SerializeToString,
                response_deserializer=trainer__message__pb2.PushModelResponse.FromString,
                )
        self.MergeModel = channel.unary_stream(
                '/fedraft.TrainerService/MergeModel',
                request_serializer=trainer__message__pb2.MergeRequest.SerializeToString,
                response_deserializer=trainer__message__pb2.MergeResponse.FromString,
                )
        self.InitModel = channel.stream_unary(
                '/fedraft.TrainerService/InitModel',
                request_serializer=trainer__message__pb2.InitModelRequest.SerializeToString,
                response_deserializer=trainer__message__pb2.InitModelResponse.FromString,
                )


class TrainerServiceServicer(object):
    """Trainer服务
    """

    def TrainModel(self, request_iterator, context):
        """训练模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushModel(self, request_iterator, context):
        """发送待合并模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeModel(self, request, context):
        """请求合并模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitModel(self, request_iterator, context):
        """初始化模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainModel': grpc.stream_stream_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=trainer__message__pb2.TrainRequest.FromString,
                    response_serializer=trainer__message__pb2.TrainResponse.SerializeToString,
            ),
            'PushModel': grpc.stream_unary_rpc_method_handler(
                    servicer.PushModel,
                    request_deserializer=trainer__message__pb2.PushModelRequest.FromString,
                    response_serializer=trainer__message__pb2.PushModelResponse.SerializeToString,
            ),
            'MergeModel': grpc.unary_stream_rpc_method_handler(
                    servicer.MergeModel,
                    request_deserializer=trainer__message__pb2.MergeRequest.FromString,
                    response_serializer=trainer__message__pb2.MergeResponse.SerializeToString,
            ),
            'InitModel': grpc.stream_unary_rpc_method_handler(
                    servicer.InitModel,
                    request_deserializer=trainer__message__pb2.InitModelRequest.FromString,
                    response_serializer=trainer__message__pb2.InitModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedraft.TrainerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrainerService(object):
    """Trainer服务
    """

    @staticmethod
    def TrainModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/fedraft.TrainerService/TrainModel',
            trainer__message__pb2.TrainRequest.SerializeToString,
            trainer__message__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/fedraft.TrainerService/PushModel',
            trainer__message__pb2.PushModelRequest.SerializeToString,
            trainer__message__pb2.PushModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MergeModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fedraft.TrainerService/MergeModel',
            trainer__message__pb2.MergeRequest.SerializeToString,
            trainer__message__pb2.MergeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/fedraft.TrainerService/InitModel',
            trainer__message__pb2.InitModelRequest.SerializeToString,
            trainer__message__pb2.InitModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
