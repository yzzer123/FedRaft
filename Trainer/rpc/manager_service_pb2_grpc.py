# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc.jobmanager_message_pb2 as jobmanager__message__pb2
import rpc.manager_message_pb2 as manager__message__pb2


class ManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AppendEntries = channel.unary_unary(
                '/fedraft.ManagerService/AppendEntries',
                request_serializer=manager__message__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=manager__message__pb2.AppendEntriesResponse.FromString,
                )
        self.VoteFor = channel.unary_unary(
                '/fedraft.ManagerService/VoteFor',
                request_serializer=manager__message__pb2.ManagerVoteRequest.SerializeToString,
                response_deserializer=manager__message__pb2.ManagerVoteResponse.FromString,
                )
        self.JobSubmit = channel.stream_stream(
                '/fedraft.ManagerService/JobSubmit',
                request_serializer=manager__message__pb2.JobSubmitRequest.SerializeToString,
                response_deserializer=manager__message__pb2.JobSubmitResponse.FromString,
                )
        self.JobShutdown = channel.unary_unary(
                '/fedraft.ManagerService/JobShutdown',
                request_serializer=jobmanager__message__pb2.JobShutdownRequest.SerializeToString,
                response_deserializer=jobmanager__message__pb2.JobShutdownResponse.FromString,
                )


class ManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteFor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobSubmit(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobShutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=manager__message__pb2.AppendEntriesRequest.FromString,
                    response_serializer=manager__message__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'VoteFor': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteFor,
                    request_deserializer=manager__message__pb2.ManagerVoteRequest.FromString,
                    response_serializer=manager__message__pb2.ManagerVoteResponse.SerializeToString,
            ),
            'JobSubmit': grpc.stream_stream_rpc_method_handler(
                    servicer.JobSubmit,
                    request_deserializer=manager__message__pb2.JobSubmitRequest.FromString,
                    response_serializer=manager__message__pb2.JobSubmitResponse.SerializeToString,
            ),
            'JobShutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.JobShutdown,
                    request_deserializer=jobmanager__message__pb2.JobShutdownRequest.FromString,
                    response_serializer=jobmanager__message__pb2.JobShutdownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedraft.ManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedraft.ManagerService/AppendEntries',
            manager__message__pb2.AppendEntriesRequest.SerializeToString,
            manager__message__pb2.AppendEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteFor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedraft.ManagerService/VoteFor',
            manager__message__pb2.ManagerVoteRequest.SerializeToString,
            manager__message__pb2.ManagerVoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobSubmit(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/fedraft.ManagerService/JobSubmit',
            manager__message__pb2.JobSubmitRequest.SerializeToString,
            manager__message__pb2.JobSubmitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobShutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedraft.ManagerService/JobShutdown',
            jobmanager__message__pb2.JobShutdownRequest.SerializeToString,
            jobmanager__message__pb2.JobShutdownResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class JobManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AppendLog = channel.unary_unary(
                '/fedraft.JobManagerService/AppendLog',
                request_serializer=jobmanager__message__pb2.AppendJobLogRequest.SerializeToString,
                response_deserializer=jobmanager__message__pb2.AppendJobLogResponse.FromString,
                )


class JobManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AppendLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AppendLog': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendLog,
                    request_deserializer=jobmanager__message__pb2.AppendJobLogRequest.FromString,
                    response_serializer=jobmanager__message__pb2.AppendJobLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedraft.JobManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AppendLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedraft.JobManagerService/AppendLog',
            jobmanager__message__pb2.AppendJobLogRequest.SerializeToString,
            jobmanager__message__pb2.AppendJobLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
